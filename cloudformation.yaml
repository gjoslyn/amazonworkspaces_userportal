AWSTemplateFormatVersion: 2010-09-09

Parameters:
  BucketName:
    Description: Name of the new S3 bucket where the website will be deployed.
    Type: String
    MinLength: 3
    MaxLength: 63
  WhitelistedIPBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 0.0.0.0/0
    Description: IP Range or IP to whitelist for access to your website (e.g. 0.0.0.0/0 will allow access to all)
    Type: String
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    DeletionPolicy: Delete
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Condition:
                IpAddress:
                    aws:SourceIp:
                      - !Ref WhitelistedIPBlock
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
      Bucket: !Ref S3Bucket

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: "WorkSpacesPortalIdentityPool"
      AllowUnauthenticatedIdentities: true
  CognitoIdentityPoolAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles: 
        "unauthenticated": !GetAtt UnauthenticatedCognitoIdentityPoolRole.Arn
   
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "getWorkSpacesInfoForUser"
  BuildURIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: "build-uri"
      RestApiId: !Ref RestApi
  APIGatewayPOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: "AWS_IAM"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "getWorkSpacesInfoForUserFunction.Arn"
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: '200'
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      OperationName: "build-uri"
      ResourceId: !Ref BuildURIResource
      RestApiId: !Ref RestApi

  APIGatewayOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "OPTIONS"
      Integration:
        Type: "MOCK"
        RequestTemplates:
          "application/json": "{\n    \"statusCode\": 200 \n}"
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: '200'
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      OperationName: "build-uri"
      ResourceId: !Ref BuildURIResource
      RestApiId: !Ref RestApi
  APIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - "APIGatewayPOSTMethod"
    Properties:
      RestApiId: !Ref RestApi
      StageName: "dev"
   
  DirectoryCacheDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "directory_id"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "directory_id"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TimeToLiveSpecification:
        AttributeName: "expiration_time"
        Enabled: true
        
  UserCacheDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "username"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "username"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TimeToLiveSpecification:
        AttributeName: "expiration_time"
        Enabled: true

  DeployWebsiteFunctionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        
  ConfigLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - RestApi
    - getWorkSpacesInfoForUserFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref getWorkSpacesInfoForUserFunction
      Principal: apigateway.amazonaws.com
      
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonWorkSpacesAdmin"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AWSDirectoryServiceReadOnlyAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        
  UnauthenticatedCognitoIdentityPoolRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated:
              - "cognito-identity.amazonaws.com"
          Action:
            - "sts:AssumeRoleWithWebIdentity"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess"

  DeployWebsite:
    Type: Custom::DeployWebsite
    Properties:
      ServiceToken: !GetAtt DeployWebsiteFunction.Arn

        
  DeployWebsiteFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt DeployWebsiteFunctionLambdaRole.Arn
      Timeout: 30
      Environment: 
        Variables:
          "IDENTITY_POOL": !Ref CognitoIdentityPool
          "REGION": !Ref AWS::Region
          "API_GW_URL": !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
          "BUCKET_NAME": !Ref BucketName
      Code:
        ZipFile: !Sub |
            from botocore.vendored import requests
            import json
            import boto3
            import inspect
            import os
            import urllib.request
            import mimetypes

            SUCCESS = "SUCCESS"
            FAILED = "FAILED"

            def lambda_handler(event, context):

                print(event)
    
                s3 = boto3.resource('s3')
    
                BUCKET_NAME = os.environ['BUCKET_NAME']
                IDENTITY_POOL = os.environ['IDENTITY_POOL']
                REGION = os.environ['REGION']
                API_GW_URL = os.environ['API_GW_URL']

                bucket = s3.Bucket(BUCKET_NAME)
    
                if event['RequestType'] == 'Delete':
                    bucket.objects.all().delete()
                    return send(event, context, 'SUCCESS', {'Success': 'Website deleted from bucket'})


                configData = inspect.cleandoc(""" var configs = {
                                     'region' : '"""+ REGION +"""',
                                     'identityPool': '"""+ IDENTITY_POOL +"""',
                                     'APIGatewayUrl': '"""+ API_GW_URL +"""'
                                 }""")

                with open('/tmp/configs.js', 'w') as data:
                    data.write(configData)

                key = 'configs.js'
                bucket.upload_file('/tmp/configs.js', key)

                files = ['index.html',
                         'scripts.js',
                         'sign4.js',
                         'styles.css',
                         'underscore.js',
                         'favicon.ico',
                         'aws-workspaces-logo.png'
                         ]

                for file in files:
                    url = "https://raw.githubusercontent.com/sdebrosse/amazonworkspaces_userportal/master/website/"+file
                    print("Downloaded "+url)

                    response = urllib.request.urlopen(url)

                    print("Downloaded "+url)

                    with open('/tmp/'+file, 'wb') as data:
                        data.write(response.read())

                    mimetype, _ = mimetypes.guess_type('/tmp/'+file)
                    bucket.upload_file('/tmp/'+file, file, ExtraArgs={'ContentType': mimetype})

                # TODO implement
                return send(event, context, 'SUCCESS', {'Success': 'Website deployed to S3 bucket'})
    
            def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
                responseUrl = event['ResponseURL']

                print(responseUrl)

                responseBody = {}
                responseBody['Status'] = responseStatus
                responseBody['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name
                responseBody['PhysicalResourceId'] = physicalResourceId or context.log_stream_name
                responseBody['StackId'] = event['StackId']
                responseBody['RequestId'] = event['RequestId']
                responseBody['LogicalResourceId'] = event['LogicalResourceId']
                responseBody['NoEcho'] = noEcho
                responseBody['Data'] = responseData

                json_responseBody = json.dumps(responseBody)

                print("Response body:\n" + json_responseBody)

                headers = {
                    'content-type' : '',
                    'content-length' : str(len(json_responseBody))
                }

                try:
                    response = requests.put(responseUrl,
                                            data=json_responseBody,
                                            headers=headers)
                    print("Status code: " + response.reason)
                except Exception as e:
                    print("send(..) failed executing requests.put(..): " + str(e))

      Runtime: python3.6

  getWorkSpacesInfoForUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Timeout: 10
      Environment:
        Variables:
          "PCM_URL_TAG": "PCM"
          "NAME_TAG": "NAME"
          "USER_CACHE_TABLE_NAME": !Ref UserCacheDynamoDBTable
          "DIRECTORY_CACHE_TABLE_NAME": !Ref DirectoryCacheDynamoDBTable
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub "${AWS::Region}-debrosse-lambda-artifacts"
        S3Key: "lambda_functions/getWorkSpacesInfoForUserFunction.zip"
        
      Runtime: python3.6
Outputs:
  apiGatewayInvokeURL:
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
  CognitoIdentityPoolId:
    Value: !Ref CognitoIdentityPool
  WebsiteURL:
    Value: !GetAtt 
      - S3Bucket
      - WebsiteURL
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - S3Bucket
          - DomainName
    Description: HTTPS URL for website hosted on S3